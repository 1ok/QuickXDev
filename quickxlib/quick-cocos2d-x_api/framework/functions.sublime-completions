{
	"scope": "source.lua",
	"completions": 
	[
		{ "trigger": "printf(fmt, ...)", "contents": "printf(${1:fmt}, ${2:...})" },
		{ "trigger": "checknumber(value, base)", "contents": "checknumber(${1:value}, ${2:base})" },
		{ "trigger": "checkint(value)", "contents": "checkint(${1:value})" },
		{ "trigger": "checkbool(value)", "contents": "checkbool(${1:value})" },
		{ "trigger": "checktable(value)", "contents": "checktable(${1:value})" },
		{ "trigger": "isset(hashtable, key)", "contents": "isset(${1:hashtable}, ${2:key})" },
		{ "trigger": "clone(object)", "contents": "clone(${1:object})" },
		{ "trigger": "class(classname, super)", "contents": "class(${1:classname}, ${2:super})" },
		{ "trigger": "iskindof(obj, classname)", "contents": "iskindof(${1:obj}, ${2:classname})" },
		{ "trigger": "import(moduleName, currentModuleName)", "contents": "import(${1:moduleName}, ${2:currentModuleName})" },
		{ "trigger": "handler(obj, method)", "contents": "handler(${1:obj}, ${2:method})" },
		{ "trigger": "math.newrandomseed()", "contents": "math.newrandomseed()" },
		{ "trigger": "math.round(value)", "contents": "math.round(${1:value})" },
		{ "trigger": "math.angle2radian(angle)", "contents": "math.angle2radian(${1:angle})" },
		{ "trigger": "math.radian2angle(radian)", "contents": "math.radian2angle(${1:radian})" },
		{ "trigger": "io.exists(path)", "contents": "io.exists(${1:path})" },
		{ "trigger": "io.readfile(path)", "contents": "io.readfile(${1:path})" },
		{ "trigger": "io.writefile(path, content, mode)", "contents": "io.writefile(${1:path}, ${2:content}, ${3:mode})" },
		{ "trigger": "io.pathinfo(path)", "contents": "io.pathinfo(${1:path})" },
		{ "trigger": "io.filesize(path)", "contents": "io.filesize(${1:path})" },
		{ "trigger": "table.nums(t)", "contents": "table.nums(${1:t})" },
		{ "trigger": "table.keys(hashtable)", "contents": "table.keys(${1:hashtable})" },
		{ "trigger": "table.values(hashtable)", "contents": "table.values(${1:hashtable})" },
		{ "trigger": "table.merge(dest, src)", "contents": "table.merge(${1:dest}, ${2:src})" },
		{ "trigger": "table.insertto(dest, src, begin)", "contents": "table.insertto(${1:dest}, ${2:src}, ${3:begin})" },
		{ "trigger": "table.indexof(array, value, begin)", "contents": "table.indexof(${1:array}, ${2:value}, ${3:begin})" },
		{ "trigger": "table.keyof(hashtable, value)", "contents": "table.keyof(${1:hashtable}, ${2:value})" },
		{ "trigger": "table.removebyvalue(array, value, removeall)", "contents": "table.removebyvalue(${1:array}, ${2:value}, ${3:removeall})" },
		{ "trigger": "table.map(t, fn)", "contents": "table.map(${1:t}, ${2:fn})" },
		{ "trigger": "table.walk(t, fn)", "contents": "table.walk(${1:t}, ${2:fn})" },
		{ "trigger": "table.filter(t, fn)", "contents": "table.filter(${1:t}, ${2:fn})" },
		{ "trigger": "table.unique(t)", "contents": "table.unique(${1:t})" },
		{ "trigger": "string.htmlspecialchars(input)", "contents": "string.htmlspecialchars(${1:input})" },
		{ "trigger": "string.restorehtmlspecialchars(input)", "contents": "string.restorehtmlspecialchars(${1:input})" },
		{ "trigger": "string.nl2br(input)", "contents": "string.nl2br(${1:input})" },
		{ "trigger": "string.text2html(input)", "contents": "string.text2html(${1:input})" },
		{ "trigger": "string.split(input, delimiter)", "contents": "string.split(${1:input}, ${2:delimiter})" },
		{ "trigger": "string.ltrim(input)", "contents": "string.ltrim(${1:input})" },
		{ "trigger": "string.rtrim(input)", "contents": "string.rtrim(${1:input})" },
		{ "trigger": "string.trim(input)", "contents": "string.trim(${1:input})" },
		{ "trigger": "string.ucfirst(input)", "contents": "string.ucfirst(${1:input})" },
		{ "trigger": "string.urlencode(input)", "contents": "string.urlencode(${1:input})" },
		{ "trigger": "string.urldecode(input)", "contents": "string.urldecode(${1:input})" },
		{ "trigger": "string.utf8len(input)", "contents": "string.utf8len(${1:input})" },
		{ "trigger": "string.formatnumberthousands(num)", "contents": "string.formatnumberthousands(${1:num})" }
	]
}
